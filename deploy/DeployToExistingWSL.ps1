# AutoNumberGame Deployment Script for Existing WSL2 with Docker
# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞ AutoNumberGame –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º WSL –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ï–ö–¢–ê =====
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ deploy.env
$envFilePath = Join-Path $PSScriptRoot "deploy.env"
if (Test-Path $envFilePath) {
    $envContent = Get-Content $envFilePath
    foreach ($line in $envContent) {
        if ($line -match '^([^=]+)=(.*)$' -and -not $line.StartsWith("#")) {
            $key = $matches[1].Trim()
            $value = $matches[2].Trim()
            if ($value.StartsWith('"') -and $value.EndsWith('"')) {
                $value = $value.Substring(1, $value.Length - 2)
            }
            New-Variable -Name $key -Value $value -Scope Script -Force
        }
    }
    Write-Host "‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ deploy.env" -ForegroundColor Green
} else {
    Write-Warning "–§–∞–π–ª deploy.env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
}

# GitHub –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è AutoNumberGame
$github_username = if ($GITHUB_USERNAME) { $GITHUB_USERNAME } else { "YOUR_GITHUB_USERNAME" }
$github_token = if ($GITHUB_TOKEN) { $GITHUB_TOKEN } else { "YOUR_GITHUB_TOKEN_HERE" }

# Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
$telegram_bot_token = if ($TELEGRAM_BOT_TOKEN) { $TELEGRAM_BOT_TOKEN } else { "YOUR_TELEGRAM_BOT_TOKEN_HERE" }
$bot_username = if ($BOT_USERNAME) { $BOT_USERNAME } else { "YOUR_BOT_USERNAME" }

# –ò–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ WSL –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ —Å Docker
$wslDistroName = if ($EXISTING_WSL_DISTRO_NAME) { $EXISTING_WSL_DISTRO_NAME } else { "YOUR_EXISTING_WSL_DISTRO_NAME" }

# –ò–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
$containerName = "autonumbergame"
$watchtowerName = "watchtower-autonumber"

# ===== –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö =====

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "  AutoNumberGame Deployment Script" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è WSL –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
function Test-WslDistro {
    param([string]$distroName)
    
    $wslList = wsl -l -q 2>$null
    if ($wslList -contains $distroName) {
        return $true
    }
    return $false
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ WSL
function Invoke-WslCommand {
    param(
        [string]$distro,
        [string]$command
    )
    
    $result = wsl -d $distro -e bash -c $command 2>&1
    return $result
}

Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ WSL –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞..." -ForegroundColor Yellow

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WSL –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
if (-not (Test-WslDistro $wslDistroName)) {
    Write-Error "WSL –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ '$wslDistroName' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    Write-Host ""
    Write-Host "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã:" -ForegroundColor Yellow
    wsl -l -v
    Write-Host ""
    Write-Host "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `$wslDistroName" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úì WSL –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ '$wslDistroName' –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –≤ WSL
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –≤ WSL..." -ForegroundColor Yellow
$dockerVersion = Invoke-WslCommand $wslDistroName "docker --version"
if ($LASTEXITCODE -ne 0) {
    Write-Error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ WSL –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ '$wslDistroName'"
    exit 1
}
Write-Host "‚úì Docker –Ω–∞–π–¥–µ–Ω: $dockerVersion" -ForegroundColor Green

Write-Host "`nüöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AutoNumberGame Telegram Bot –≤ WSL..." -ForegroundColor Yellow

# –°–æ–∑–¥–∞–µ–º bash —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
$deployScript = @'
#!/bin/bash
set -euo pipefail

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AutoNumberGame..."

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
GITHUB_USERNAME="__GITHUB_USERNAME__"
GITHUB_TOKEN="__GITHUB_TOKEN__"
TELEGRAM_BOT_TOKEN="__TELEGRAM_BOT_TOKEN__"
BOT_USERNAME="__BOT_USERNAME__"
CONTAINER_NAME="__CONTAINER_NAME__"
WATCHTOWER_NAME="__WATCHTOWER_NAME__"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ Docker
if ! docker info >/dev/null 2>&1; then
    echo "–ó–∞–ø—É—Å–∫–∞–µ–º Docker..."
    sudo service docker start
    sleep 5
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞ –±–µ–∑ –≤—Ö–æ–¥–∞ –≤ GHCR
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub Container Registry (ghcr.io)..."
IMAGE_REPO="ghcr.io/$GITHUB_USERNAME/autonumbergame:latest"
echo "Image: $IMAGE_REPO"
if docker pull "$IMAGE_REPO"; then
  echo "‚úÖ Pull succeeded without additional login"
else
  echo "‚ÑπÔ∏è Pull failed, attempting login to GHCR..."
  if [ -n "${GITHUB_TOKEN:-}" ]; then
    echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin || {
      echo "‚ùå Login to ghcr.io failed. Check token scope read:packages and SSO if using org packages.";
      exit 1;
    }
    docker pull "$IMAGE_REPO" || {
      echo "‚ùå Pull failed after login. Verify image path and permissions: $IMAGE_REPO";
      exit 1;
    }
  else
    echo "‚ùå GITHUB_TOKEN is not provided and pull failed. Provide token or make image public: $IMAGE_REPO";
    exit 1;
  fi
fi

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Watchtower (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
echo "üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Watchtower..."
if [ -n "${GITHUB_TOKEN:-}" ]; then
  mkdir -p ~/.docker
  if [ ! -f ~/.docker/watchtower-autonumber.json ]; then
    cat > ~/.docker/watchtower-autonumber.json << EOF
{
  "auths": {
    "ghcr.io": {
      "auth": "$(echo -n "$GITHUB_USERNAME:$GITHUB_TOKEN" | base64)"
    }
  }
}
EOF
    chmod 600 ~/.docker/watchtower-autonumber.json
    echo "‚úÖ Watchtower auth config created"
  else
    echo "‚ÑπÔ∏è Watchtower config already exists, leaving as is"
  fi
else
  echo "‚ÑπÔ∏è GITHUB_TOKEN not provided ‚Äî skipping Watchtower auth config creation"
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö..."
mkdir -p ~/autonumbergame/data
chmod 755 ~/autonumbergame/data

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)..."
docker stop $CONTAINER_NAME $WATCHTOWER_NAME 2>/dev/null || true
docker rm $CONTAINER_NAME $WATCHTOWER_NAME 2>/dev/null || true

# –û–±—Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω/–∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
echo "‚¨áÔ∏è –û–±—Ä–∞–∑ AutoNumberGame –¥–æ—Å—Ç—É–ø–µ–Ω: $IMAGE_REPO"

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä AutoNumberGame (–±–µ–∑ –ø–æ—Ä—Ç–æ–≤ - –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram API)
echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ AutoNumberGame Telegram Bot..."
docker run -d \
  --name $CONTAINER_NAME \
  --restart always \
  -e TELEGRAM_BOT_TOKEN="$TELEGRAM_BOT_TOKEN" \
  -e BOT_USERNAME="$BOT_USERNAME" \
  -e NODE_ENV=production \
  -e GAME_DATA_FILE=/app/data/game_data.json \
  -e MAX_NUMBERS=999 \
  -v ~/autonumbergame/data:/app/data \
  "$IMAGE_REPO"

# –ó–∞–ø—É—Å–∫–∞–µ–º Watchtower –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
echo "üîÑ –ó–∞–ø—É—Å–∫ Watchtower –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
if [ -f ~/.docker/watchtower-autonumber.json ]; then
  docker run -d \
    --name $WATCHTOWER_NAME \
    --restart always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v ~/.docker/watchtower-autonumber.json:/config.json \
    -e DOCKER_CONFIG=/ \
    -e WATCHTOWER_POLL_INTERVAL=300 \
    containrrr/watchtower \
    --cleanup \
    --remove-volumes \
    $CONTAINER_NAME
else
  docker run -d \
    --name $WATCHTOWER_NAME \
    --restart always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e WATCHTOWER_POLL_INTERVAL=300 \
    containrrr/watchtower \
    --cleanup \
    --remove-volumes \
    $CONTAINER_NAME
fi

echo ""
echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps --filter "name=$CONTAINER_NAME" --filter "name=$WATCHTOWER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üìç AutoNumberGame Telegram Bot –∑–∞–ø—É—â–µ–Ω!"
echo "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram API (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤)"
echo "üîÑ Watchtower –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
'@

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å Unix –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
$tempScriptPath = [System.IO.Path]::GetTempFileName()
# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Unix —Ñ–æ—Ä–º–∞—Ç (LF –≤–º–µ—Å—Ç–æ CRLF)
$utf8NoBom = New-Object System.Text.UTF8Encoding($false)

# –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
$deployScriptPrepared = $deployScript
$deployScriptPrepared = $deployScriptPrepared.Replace('__GITHUB_USERNAME__', $github_username)
$deployScriptPrepared = $deployScriptPrepared.Replace('__GITHUB_TOKEN__', $github_token)
$deployScriptPrepared = $deployScriptPrepared.Replace('__TELEGRAM_BOT_TOKEN__', $telegram_bot_token)
$deployScriptPrepared = $deployScriptPrepared.Replace('__BOT_USERNAME__', $bot_username)
$deployScriptPrepared = $deployScriptPrepared.Replace('__CONTAINER_NAME__', $containerName)
$deployScriptPrepared = $deployScriptPrepared.Replace('__WATCHTOWER_NAME__', $watchtowerName)

[System.IO.File]::WriteAllText($tempScriptPath, $deployScriptPrepared.Replace("`r`n", "`n"), $utf8NoBom)

# –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –≤ WSL
$wslScriptPath = "/tmp/deploy_autonumber.sh"
$windowsPath = $tempScriptPath.Replace('\', '/')
$windowsPath = "/mnt/" + $windowsPath.Substring(0,1).ToLower() + $windowsPath.Substring(2)

Write-Host "üìù –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ WSL..." -ForegroundColor Yellow
Invoke-WslCommand $wslDistroName "cp '$windowsPath' $wslScriptPath && chmod +x $wslScriptPath"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ dos2unix –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
Invoke-WslCommand $wslDistroName "which dos2unix > /dev/null 2>&1 && dos2unix $wslScriptPath || true"

# –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
Write-Host "üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..." -ForegroundColor Yellow
Write-Host ""
$deployResult = wsl -d $wslDistroName bash $wslScriptPath

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if ($LASTEXITCODE -eq 0) {
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Green
    Write-Host "‚úÖ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "üì¶ –ü—Ä–æ–µ–∫—Ç: AutoNumberGame Telegram Bot" -ForegroundColor Cyan
    Write-Host "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram API" -ForegroundColor Cyan
    Write-Host "üí¨ –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram: @$bot_username" -ForegroundColor Cyan
    Write-Host "üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Watchtower –≤–∫–ª—é—á–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Yellow
    Write-Host "  –í–æ–π—Ç–∏ –≤ WSL: wsl -d $wslDistroName" -ForegroundColor White
    Write-Host "  –õ–æ–≥–∏ –±–æ—Ç–∞: wsl -d $wslDistroName docker logs $containerName" -ForegroundColor White
    Write-Host "  –õ–æ–≥–∏ Watchtower: wsl -d $wslDistroName docker logs $watchtowerName" -ForegroundColor White
    Write-Host "  –°—Ç–∞—Ç—É—Å: wsl -d $wslDistroName docker ps" -ForegroundColor White
    Write-Host "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: wsl -d $wslDistroName docker restart $containerName" -ForegroundColor White
    Write-Host "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: wsl -d $wslDistroName docker stop $containerName $watchtowerName" -ForegroundColor White
    Write-Host ""
} else {
    Write-Error "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ."
    exit 1
}

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
Remove-Item -Path $tempScriptPath -Force -ErrorAction SilentlyContinue

Write-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..." -ForegroundColor Yellow
Read-Host
