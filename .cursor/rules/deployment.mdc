# AutoNumberGame - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ DevOps

## –û–±–∑–æ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã

AutoNumberGame –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GitHub Actions.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   GitHub        ‚îÇ    ‚îÇ   Docker Hub    ‚îÇ    ‚îÇ  Windows Server ‚îÇ
‚îÇ   Repository    ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ   Registry      ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ      2022       ‚îÇ
‚îÇ                 ‚îÇ    ‚îÇ                 ‚îÇ    ‚îÇ                 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ                       ‚îÇ                       ‚îÇ
         ‚îÇ                       ‚îÇ                       ‚îÇ
         ‚ñº                       ‚ñº                       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  GitHub Actions ‚îÇ    ‚îÇ  Docker Image   ‚îÇ    ‚îÇ  Production     ‚îÇ
‚îÇ  CI/CD Pipeline ‚îÇ    ‚îÇ  AutoNumberGame ‚îÇ    ‚îÇ  Environment    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**–ü–æ—Ç–æ–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:**
1. **GitHub** - —Å–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
2. **Docker Hub** - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
3. **Windows Server 2022** - –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞

## Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è

### Dockerfile

```dockerfile
FROM node:22-alpine

WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ package —Ñ–∞–π–ª–æ–≤
COPY package*.json ./

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN npm ci --only=production

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . .

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# –°–º–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–∞–π–ª–æ–≤
RUN chown -R nodejs:nodejs /app
USER nodejs

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ (–¥–ª—è health checks)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "process.exit(0)"

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CMD ["npm", "start"]
```

### Docker Compose

#### –ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```yaml
version: '3.8'

services:
  autonumbergame:
    build: .
    container_name: autonumbergame-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - GAME_DATA_FILE=/app/data/game_data.json
      - MAX_NUMBERS=999
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - autonumbergame-network
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  autonumbergame-network:
    driver: bridge

volumes:
  data:
  logs:
```

#### –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```yaml
version: '3.8'

services:
  autonumbergame-dev:
    build: .
    container_name: autonumbergame-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - GAME_DATA_FILE=/app/data/game_data.json
      - MAX_NUMBERS=999
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./logs:/app/logs
      - ./node_modules:/app/node_modules
    networks:
      - autonumbergame-network
    command: npm run dev

networks:
  autonumbergame-network:
    driver: bridge
```

## GitHub Actions CI/CD

### Workflow —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deployment notification
      run: |
        echo "‚úÖ Docker image built and pushed successfully!"
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "üîó SHA: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo ""
        echo "üñ•Ô∏è  Windows Server 2022 with Watchtower will auto-update"
        echo ""
        echo "Manual deployment:"
        echo "1. Login: docker login ${{ env.REGISTRY }} -u USERNAME -p GITHUB_TOKEN"
        echo "2. Pull: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "3. Run: docker-compose up -d"
```

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

#### GitHub Secrets
- `GITHUB_TOKEN` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è GitHub (–¥–ª—è GitHub Container Registry)
- `TELEGRAM_BOT_TOKEN` - —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞

#### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è CI/CD
- `REGISTRY: ghcr.io` - GitHub Container Registry
- `IMAGE_NAME: ${{ github.repository }}` - –∏–º—è –æ–±—Ä–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

### –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

#### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
- Docker >= 20.10
- Docker Compose >= 2.0
- Node.js >= 22 (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

#### –®–∞–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
```bash
# 1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git clone https://github.com/username/AutoNumberGame.git
cd AutoNumberGame

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
cp env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª

# 3. –ó–∞–ø—É—Å–∫ –≤ Docker
docker-compose up -d

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
docker-compose ps
docker-compose logs -f
```

### –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

#### –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (Windows Server 2022)
- **–û–°**: Windows Server 2022 Standard/Datacenter
- **Docker**: Docker Desktop for Windows –∏–ª–∏ Docker Engine
- **Docker Compose**: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ Docker Desktop
- **–†–µ—Å—É—Ä—Å—ã**: –ú–∏–Ω–∏–º—É–º 2GB RAM, 20GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
- **–°–µ—Ç—å**: –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑–æ–≤

#### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Windows Server 2022
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Windows Containers (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Active Directory
- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä Windows
- PowerShell –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- Task Scheduler –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á

#### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

**–î–ª—è Windows Server 2022 (PowerShell):**
```powershell
# deploy.ps1
param(
    [string]$ImageTag = "latest",
    [string]$DockerHubUsername = "your-username"
)

Write-Host "üöÄ Starting deployment on Windows Server 2022..." -ForegroundColor Green

try {
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    Write-Host "üõë Stopping existing containers..." -ForegroundColor Yellow
    docker-compose down
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    Write-Host "üóëÔ∏è Removing old images..." -ForegroundColor Yellow
    docker image prune -f
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Å Docker Hub
    Write-Host "‚¨áÔ∏è Pulling latest image from Docker Hub..." -ForegroundColor Yellow
    docker pull "$DockerHubUsername/autonumbergame:$ImageTag"
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    Write-Host "‚ñ∂Ô∏è Starting services..." -ForegroundColor Yellow
    docker-compose up -d
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    Write-Host "üîç Checking service health..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
    docker-compose ps
    
    Write-Host "‚úÖ Deployment completed successfully!" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Deployment failed: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
```

**–î–ª—è Linux/Ubuntu (bash):**
```bash
#!/bin/bash
# deploy.sh

set -e

echo "üöÄ Starting deployment..."

# Pull latest changes
git pull origin main

# Build and start services
docker-compose -f docker-compose.yml build
docker-compose -f docker-compose.yml up -d

# Health check
echo "üîç Checking service health..."
sleep 10
docker-compose ps

echo "‚úÖ Deployment completed successfully!"
```

#### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
docker-compose ps

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
docker-compose logs -f autonumbergame

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
docker stats

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
docker inspect autonumbergame-prod | grep -A 10 Health
```

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Windows Server 2022

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker

#### –°–ø–æ—Å–æ–± 1: Docker Desktop for Windows
```powershell
# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Desktop
# https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe

# –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
Restart-Computer -Force
```

#### –°–ø–æ—Å–æ–± 2: Docker Engine (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤)
```powershell
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ PowerShell
Install-Module -Name DockerMsftProvider -Repository PSGallery -Force
Install-Package -Name docker -ProviderName DockerMsftProvider -Force

# –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã Docker
Start-Service docker
Set-Service -Name docker -StartupType Automatic
```

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞
```powershell
# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è Docker
New-NetFirewallRule -DisplayName "Docker" -Direction Inbound -Protocol TCP -LocalPort 2375,2376 -Action Allow
New-NetFirewallRule -DisplayName "Docker Compose" -Direction Inbound -Protocol TCP -LocalPort 3000 -Action Allow
```

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Task Scheduler
```powershell
# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
$Action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-File C:\Scripts\deploy.ps1"
$Trigger = New-ScheduledTaskTrigger -Daily -At 2:00AM
$Principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\SYSTEM" -LogonType ServiceAccount -RunLevel Highest

Register-ScheduledTask -TaskName "AutoNumberGame Update" -Action $Action -Trigger $Trigger -Principal $Principal
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–æ–≤
```
logs/
‚îú‚îÄ‚îÄ app.log          # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ error.log        # –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
‚îú‚îÄ‚îÄ access.log       # –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–∞
‚îî‚îÄ‚îÄ archive/         # –ê—Ä—Ö–∏–≤ –ª–æ–≥–æ–≤
    ‚îú‚îÄ‚îÄ 2024-01-15/
    ‚îî‚îÄ‚îÄ 2024-01-16/
```

#### –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
```yaml
# docker-compose.yml
services:
  autonumbergame:
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

#### Prometheus –º–µ—Ç—Ä–∏–∫–∏
```javascript
// metrics.js
const prometheus = require('prom-client');

const httpRequestDuration = new prometheus.Histogram({
  name: 'http_request_duration_seconds',
  help: 'Duration of HTTP requests in seconds',
  labelNames: ['method', 'route', 'status_code']
});

const gameNumbersFound = new prometheus.Counter({
  name: 'game_numbers_found_total',
  help: 'Total numbers found in the game'
});
```

#### Grafana –¥–∞—à–±–æ—Ä–¥
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
- –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
- –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

### Docker –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ó–∞–ø—É—Å–∫ –æ—Ç –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ (Alpine Linux)
- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –æ–±—Ä–∞–∑–µ
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ GitHub Secrets
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

### –°–µ—Ç–µ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ò–∑–æ–ª—è—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ Docker network
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–º
- Firewall –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

## –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

### –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
```yaml
# docker-compose.scale.yml
services:
  autonumbergame:
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
```

### Load Balancing
- Nginx reverse proxy
- Docker Swarm –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
- Kubernetes –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π

### –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- –ú–∏–≥—Ä–∞—Ü–∏—è —Å JSON –Ω–∞ PostgreSQL
- –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –≤—ã—Å–æ–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
- Backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

## Backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

### –°—Ç—Ä–∞—Ç–µ–≥–∏—è backup
```bash
#!/bin/bash
# backup.sh

DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backup/autonumbergame"

# –°–æ–∑–¥–∞–Ω–∏–µ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p $BACKUP_DIR

# Backup –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
docker exec autonumbergame-prod tar czf - /app/data > $BACKUP_DIR/game_data_$DATE.tar.gz

# Backup –ª–æ–≥–æ–≤
docker exec autonumbergame-prod tar czf - /app/logs > $BACKUP_DIR/logs_$DATE.tar.gz

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
find $BACKUP_DIR -name "*.tar.gz" -mtime +30 -delete

echo "Backup completed: $BACKUP_DIR/game_data_$DATE.tar.gz"
```

### –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
```bash
#!/bin/bash
# restore.sh

BACKUP_FILE=$1
if [ -z "$BACKUP_FILE" ]; then
    echo "Usage: $0 <backup_file>"
    exit 1
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
docker-compose stop autonumbergame

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
docker exec -i autonumbergame-prod tar xzf - < $BACKUP_FILE

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
docker-compose start autonumbergame

echo "Restore completed from $BACKUP_FILE"
```

## Troubleshooting

### –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

#### –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
docker-compose logs autonumbergame

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
docker exec autonumbergame-prod env | grep TELEGRAM
```

#### –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ data –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
ls -la data/

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JSON —Ñ–∞–π–ª–∞
docker exec autonumbergame-prod cat /app/data/game_data.json

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
sudo chown -R 1001:1001 data/
```

#### –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é
```bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
docker stats

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ docker-compose.yml
services:
  autonumbergame:
    deploy:
      resources:
        limits:
          memory: 512M
```
description:
globs:
alwaysApply: true
---
