# AutoNumberGame - Архитектура проекта

## Обзор системы

AutoNumberGame - это Telegram бот-игра, построенная на Node.js с использованием ES модулей. Система спроектирована с учетом принципов чистой архитектуры и разделения ответственности.

## Компоненты системы

### 1. Telegram Bot Interface (`src/bot/telegramBot.js`)
**Ответственность**: Взаимодействие с Telegram Bot API
**Зависимости**: `node-telegram-bot-api`, `GameLogic`

**Основные функции**:
- Обработка входящих сообщений
- Управление жизненным циклом бота
- Маршрутизация команд и сообщений
- Обработка ошибок и логирование

**Архитектурные решения**:
- Использование long polling для получения обновлений
- Разделение обработки команд и обычных сообщений
- Централизованное логирование всех операций

### 2. Game Logic (`src/game/gameLogic.js`)
**Ответственность**: Бизнес-логика игры
**Зависимости**: `GameStorage`

**Основные функции**:
- Валидация номеров (001-999)
- Обработка игровых команд
- Генерация ответов для игроков
- Управление состоянием игры

**Архитектурные решения**:
- Отделение бизнес-логики от интерфейса
- Использование паттерна Strategy для обработки команд
- Централизованная валидация входных данных

### 3. Game Storage (`src/storage/gameStorage.js`)
**Ответственность**: Персистентность игровых данных
**Зависимости**: `fs/promises`, `path`

**Основные функции**:
- Сохранение/загрузка номеров
- Управление данными игроков
- Статистика игры
- Проверка завершения игры

**Архитектурные решения**:
- Асинхронная работа с файловой системой
- Автоматическое создание директорий
- Атомарные операции записи
- Обработка ошибок файловой системы

### 4. Main Application (`src/index.js`)
**Ответственность**: Точка входа и управление жизненным циклом
**Зависимости**: `dotenv`, `TelegramGameBot`

**Основные функции**:
- Загрузка конфигурации
- Инициализация бота
- Обработка сигналов завершения
- Глобальная обработка ошибок
- Health check каждые 5 минут
- Мониторинг активности бота

## Потоки данных

### 1. Обработка номера
```
Telegram Message → Bot Interface → Game Logic → Game Storage → JSON File
```

### 2. Получение статистики
```
Command /stats → Bot Interface → Game Logic → Game Storage → Response
```

### 3. Обработка ошибок
```
Error → Global Handler → Logging → Graceful Shutdown
```

## Принципы проектирования

### 1. Разделение ответственности
- Каждый модуль имеет четко определенную зону ответственности
- Минимальные зависимости между модулями
- Интерфейсы определены через импорты/экспорты

### 2. Защита от ботов
- Автоматическая проверка `msg.from.is_bot` во всех обработчиках
- Игнорирование сообщений от ботов с логированием
- Предотвращение добавления ботов в список игроков
- Проверка в командах `/start`, `/stats`, `/help`, `/reset`, `/botstats`

### 3. Long Polling с восстановлением
- Сохранение последнего `update_id` в `bot_state.json`
- Автоматическое восстановление с последнего известного состояния
- Обработка ошибок polling (409 Conflict, 429 Rate Limit)
- Сохранение состояния при остановке бота

### 2. Обработка ошибок
- Централизованная обработка необработанных ошибок
- Graceful shutdown при критических ошибках
- Логирование всех операций для отладки

### 3. Конфигурируемость
- Использование переменных окружения
- Гибкие настройки путей и параметров
- Поддержка различных окружений (dev/prod)

### 4. Тестируемость
- Модульная архитектура упрощает тестирование
- Использование dependency injection для моков
- Покрытие тестами >= 80%

## Технологический стек

- **Runtime**: Node.js >= 22
- **Модули**: ES Modules (ESM)
- **Тестирование**: Vitest + @vitest/coverage-v8
- **Линтинг**: ESLint
- **Контейнеризация**: Docker
- **CI/CD**: GitHub Actions
- **API**: Telegram Bot API

## Масштабируемость

### Текущие ограничения
- Хранение в JSON файле (подходит для небольших игр)
- Long polling (ограничения Telegram API)

### Возможности улучшения
- Миграция на базу данных (PostgreSQL/MongoDB)
- Кэширование в Redis
- Микросервисная архитектура

## Безопасность

- Валидация всех входных данных
- Ограничение доступа к командам админа
- Безопасное хранение токенов в переменных окружения
- Логирование всех действий для аудита
description:
globs:
alwaysApply: true
---
