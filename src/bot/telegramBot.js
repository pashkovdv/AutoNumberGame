import TelegramBot from 'node-telegram-bot-api';
import { GameLogic } from '../game/gameLogic.js';
import { GameStorage } from '../storage/gameStorage.js';

export class TelegramGameBot {
  constructor(token, dataFilePath = './data/game_data.json') {
    this.bot = new TelegramBot(token, { 
      polling: true,
      polling_options: {
        timeout: 10,
        limit: 100,
        allowed_updates: ['message', 'callback_query']
      }
    });
    this.storage = new GameStorage(dataFilePath);
    this.gameLogic = new GameLogic(this.storage);
    this.lastUpdateId = 0;
    this.isRunning = false;
    this.botId = null; // ID –±–æ—Ç–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ initialize()
    
    this.setupEventHandlers();
  }

  async initialize() {
    try {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
      console.log('üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
      
      await this.storage.initialize();
      console.log('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π update_id –∏–∑ –±–∞–∑—ã
      this.lastUpdateId = await this.storage.getLastUpdateId();
      console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π update_id:', this.lastUpdateId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.getBotInfo();
      console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botInfo);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º polling
      this.isRunning = true;
      console.log('‚úÖ Telegram bot initialized successfully');
      console.log('üîÑ Polling –∞–∫—Ç–∏–≤–µ–Ω —Å offset:', this.lastUpdateId);
    } catch (error) {
      console.error('‚ùå Failed to initialize bot:', error);
      throw error;
    }
  }

  setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è)
    this.bot.onText(/\/start/, async (msg) => {
      console.log('üì± –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id, '–≤ —á–∞—Ç–µ:', msg.chat?.id);
      await this.handleStartCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
    this.bot.onText(/\/stats/, async (msg) => {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      await this.handleStatsCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.onText(/\/help/, async (msg) => {
      console.log('‚ùì –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      await this.handleHelpCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    this.bot.onText(/\/reset/, async (msg) => {
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /reset –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      await this.handleResetCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /botstats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    this.bot.onText(/\/botstats/, async (msg) => {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /botstats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      await this.handleBotStatsCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ –Ω–µ –∫–æ–º–∞–Ω–¥)
    this.bot.on('message', async (msg) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
      if (msg.text && msg.text.startsWith('/')) {
        console.log('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞:', msg.text);
        return;
      }

      console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg.text, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      
      try {
        await this.handleMessage(msg);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await this.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error) => {
      this.handlePollingError(error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.bot.on('polling_start', () => {
      console.log('üîÑ Polling started - –±–æ—Ç –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    this.bot.on('polling_success', (updates) => {
      if (updates && updates.length > 0) {
        const lastUpdate = updates[updates.length - 1];
        this.lastUpdateId = lastUpdate.update_id;
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', updates.length, '–ü–æ—Å–ª–µ–¥–Ω–∏–π update_id:', this.lastUpdateId);
      }
    });

    console.log('‚úÖ Event handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  async handleMessage(msg) {
    const { text, chat, from, message_id, date } = msg;
    
    if (!text) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
    if (from.is_bot) {
      console.log('ü§ñ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:', from.id);
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º from.id (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
    const userId = from.id.toString();
    const username = from.username || '–±–µ–∑ username';
    
    console.log(`üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ID=${userId}, Username=${username}, Chat ID=${chat.id}, From ID=${from.id}`);
    console.log(`üì± –¢–∏–ø —á–∞—Ç–∞: ${chat.type}, is_bot=${from.is_bot}`);

    const response = await this.gameLogic.processMessage(text, userId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    if (msg.update_id) {
      await this.storage.updateBotActivity(msg.update_id, new Date(date * 1000).toISOString());
    }
    
    await this.sendMessage(chat.id, response.text);
  }

  async handleStartCommand(msg) {
    const { from, chat } = msg;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç –±–æ—Ç–∞
    if (from.is_bot) {
      console.log('ü§ñ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start –æ—Ç –±–æ—Ç–∞');
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º from.id (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
    const userId = from.id.toString();
    const username = from.username || 'username';
    
    console.log(`üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç: ID=${userId}, Username=${username}, Chat ID=${chat.id}, From ID=${from.id}`);
    console.log(`üì± –¢–∏–ø —á–∞—Ç–∞: ${chat.type}, is_bot=${from.is_bot}`);

    const welcomeMessage = 
      'üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É AutoNumberGame! üöó\n\n' +
      '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n' +
      '‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ—Ç 001 –¥–æ 999\n' +
      '‚Ä¢ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–æ–≤—ã–π - –ø–æ–ª—É—á–∏—Ç–µ "–∑–∞–ø–æ–º–Ω–∏–ª–∏"\n' +
      '‚Ä¢ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å - –ø–æ–ª—É—á–∏—Ç–µ "—É–∂–µ –µ—Å—Ç—å"\n' +
      '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ "?" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–æ–º–µ—Ä–∞\n' +
      '‚Ä¢ –¶–µ–ª—å: –Ω–∞–π—Ç–∏ –≤—Å–µ 999 –Ω–æ–º–µ—Ä–æ–≤!\n\n' +
      '–ö–æ–º–∞–Ω–¥—ã:\n' +
      '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã\n' +
      '/help - —Å–ø—Ä–∞–≤–∫–∞\n\n' +
      '–ù–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É! üéÆ';

    await this.sendMessage(msg.chat.id, welcomeMessage);
  }

  async handleStatsCommand(msg) {
    const { from, chat } = msg;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç –±–æ—Ç–∞
    if (from.is_bot) {
      console.log('ü§ñ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats –æ—Ç –±–æ—Ç–∞');
      return;
    }

    try {
      const stats = this.gameLogic.getGameStats();
      const userStats = await this.storage.getUserStatsWithUsernames(this.bot);
      
      let statsMessage = stats.text + '\n\n';
      
      if (userStats.length > 0) {
        statsMessage += 'üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n';
        userStats.forEach((userStat, index) => {
          const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üéØ';
          statsMessage += `${medal} ${userStat.displayName} (@${userStat.username}): ${userStat.count} –Ω–æ–º–µ—Ä–æ–≤\n`;
        });
      } else {
        statsMessage += 'üìù –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞';
      }
      
      await this.sendMessage(chat.id, statsMessage);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      const stats = this.gameLogic.getGameStats();
      await this.sendMessage(chat.id, stats.text);
    }
  }

  async handleHelpCommand(msg) {
    const { from, chat } = msg;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç –±–æ—Ç–∞
    if (from.is_bot) {
      console.log('ü§ñ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /help –æ—Ç –±–æ—Ç–∞');
      return;
    }

    const helpMessage = 
      'üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–µ AutoNumberGame\n\n' +
      'üéØ –¶–µ–ª—å: –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ—Ç 001 –¥–æ 999\n\n' +
      'üìù –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n' +
      '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 999\n' +
      '2. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç "–∑–∞–ø–æ–º–Ω–∏–ª–∏" –∏–ª–∏ "—É–∂–µ –µ—Å—Ç—å"\n' +
      '3. –ö–∞–∂–¥—ã–µ 10 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–º–µ—Ä–æ–≤ –±–æ—Ç —Å–æ–æ–±—â–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å\n' +
      '4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "?" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤\n\n' +
      'üèÜ –ü–æ–±–µ–¥–∞: –ö–æ–≥–¥–∞ –≤—Å–µ 999 –Ω–æ–º–µ—Ä–æ–≤ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã!\n\n' +
      '–ö–æ–º–∞–Ω–¥—ã:\n' +
      '/start - –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã\n' +
      '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
      '/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞';

    await this.sendMessage(chat.id, helpMessage);
  }

  async handleResetCommand(msg) {
    const { from, chat } = msg;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    const userId = from.id.toString();
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (userId === process.env.ADMIN_USER_ID || process.env.NODE_ENV === 'development') {
      const result = await this.gameLogic.resetGame();
      await this.sendMessage(chat.id, result.text);
    } else {
      await this.sendMessage(chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  async handleBotStatsCommand(msg) {
    const { from, chat } = msg;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const userId = from.id.toString();
    
    if (userId === process.env.ADMIN_USER_ID || process.env.NODE_ENV === 'development') {
      const stats = await this.getBotStats();
      if (stats) {
        const statsMessage = 
          'ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n' +
          `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π update_id: ${stats.bot.lastUpdateId}\n` +
          `üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(stats.bot.lastActivity).toLocaleString('ru-RU')}\n` +
          `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(stats.bot.uptime / 60)} –º–∏–Ω\n` +
          `üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.bot.totalMessagesProcessed}\n` +
          `üîÑ –°—Ç–∞—Ç—É—Å: ${stats.bot.isRunning ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n` +
          'üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n' +
          `üìà –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: ${stats.game.totalNumbers}\n` +
          `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${stats.game.remaining}\n` +
          `üë• –ò–≥—Ä–æ–∫–æ–≤: ${stats.game.players}`;
        
        await this.sendMessage(chat.id, statsMessage);
      } else {
        await this.sendMessage(chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    } else {
      await this.sendMessage(chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  async sendMessage(chatId, text) {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç:', chatId);
      console.log('üìù –¢–µ–∫—Å—Ç:', text.substring(0, 100) + (text.length > 100 ? '...' : ''));
      
      await this.bot.sendMessage(chatId, text, { parse_mode: 'HTML' });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç:', chatId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç', chatId, ':', error);
    }
  }

  async stop() {
    try {
      this.isRunning = false;
      if (this.bot) {
        await this.bot.stopPolling();
        console.log('üõë Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await this.storage.saveBotState({
        lastUpdateId: this.lastUpdateId,
        lastMessageTime: new Date().toISOString()
      });
      
      console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
    }
  }

  getBotInfo() {
    return this.bot.getMe();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
  async handlePollingError(error) {
    if (error.code === 'ETELEGRAM') {
      if (error.response.statusCode === 409) {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        await this.stop();
      } else if (error.response.statusCode === 429) {
        console.log('‚è≥ Rate limit, –∂–¥–µ–º 60 —Å–µ–∫—É–Ω–¥...');
        setTimeout(() => this.initialize(), 60000);
      } else {
        console.error('‚ùå Telegram API error:', error.response.statusCode, error.response.body);
      }
    } else {
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ polling:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
  async getBotStats() {
    try {
      const botState = await this.storage.getBotState();
      const gameStats = this.storage.getStats();
      
      return {
        bot: {
          lastUpdateId: botState.lastUpdateId,
          lastActivity: botState.lastActivity,
          uptime: botState.uptime,
          totalMessagesProcessed: botState.totalMessagesProcessed,
          isRunning: this.isRunning
        },
        game: gameStats
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }
}
