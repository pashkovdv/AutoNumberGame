import TelegramBot from 'node-telegram-bot-api';
import { GameLogic } from '../game/gameLogic.js';
import { GameStorage } from '../storage/gameStorage.js';

export class TelegramGameBot {
  constructor(token, dataFilePath = './data/game_data.json') {
    this.bot = new TelegramBot(token, { polling: true });
    this.storage = new GameStorage(dataFilePath);
    this.gameLogic = new GameLogic(this.storage);
    
    this.setupEventHandlers();
  }

  async initialize() {
    try {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
      console.log('üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
      
      await this.storage.initialize();
      console.log('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.getBotInfo();
      console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botInfo);
      
      console.log('‚úÖ Telegram bot initialized successfully');
      console.log('üîÑ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...');
    } catch (error) {
      console.error('‚ùå Failed to initialize bot:', error);
      throw error;
    }
  }

  setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è)
    this.bot.onText(/\/start/, async (msg) => {
      console.log('üì± –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      await this.handleStartCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
    this.bot.onText(/\/stats/, async (msg) => {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      await this.handleStatsCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.onText(/\/help/, async (msg) => {
      console.log('‚ùì –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      await this.handleHelpCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    this.bot.onText(/\/reset/, async (msg) => {
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /reset –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      await this.handleResetCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ –Ω–µ –∫–æ–º–∞–Ω–¥)
    this.bot.on('message', async (msg) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
      if (msg.text && msg.text.startsWith('/')) {
        console.log('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞:', msg.text);
        return;
      }

      console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg.text, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from?.id);
      
      try {
        await this.handleMessage(msg);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await this.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error) => {
      console.error('‚ùå Polling error:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.bot.on('polling_start', () => {
      console.log('üîÑ Polling started - –±–æ—Ç –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
    });

    console.log('‚úÖ Event handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  async handleMessage(msg) {
    const { text, chat, from } = msg;
    
    if (!text) return;

    const userId = from.id.toString();
    const response = await this.gameLogic.processMessage(text, userId);
    
    await this.sendMessage(chat.id, response.text);
  }

  async handleStartCommand(msg) {
    const welcomeMessage = 
      'üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É AutoNumberGame! üöó\n\n' +
      '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n' +
      '‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ—Ç 001 –¥–æ 999\n' +
      '‚Ä¢ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–æ–≤—ã–π - –ø–æ–ª—É—á–∏—Ç–µ "–∑–∞–ø–æ–º–Ω–∏–ª–∏"\n' +
      '‚Ä¢ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å - –ø–æ–ª—É—á–∏—Ç–µ "—É–∂–µ –µ—Å—Ç—å"\n' +
      '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ "?" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–æ–º–µ—Ä–∞\n' +
      '‚Ä¢ –¶–µ–ª—å: –Ω–∞–π—Ç–∏ –≤—Å–µ 999 –Ω–æ–º–µ—Ä–æ–≤!\n\n' +
      '–ö–æ–º–∞–Ω–¥—ã:\n' +
      '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã\n' +
      '/help - —Å–ø—Ä–∞–≤–∫–∞\n\n' +
      '–ù–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É! üéÆ';

    await this.sendMessage(msg.chat.id, welcomeMessage);
  }

  async handleStatsCommand(msg) {
    const stats = this.gameLogic.getGameStats();
    await this.sendMessage(msg.chat.id, stats.text);
  }

  async handleHelpCommand(msg) {
    const helpMessage = 
      'üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–µ AutoNumberGame\n\n' +
      'üéØ –¶–µ–ª—å: –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ—Ç 001 –¥–æ 999\n\n' +
      'üìù –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n' +
      '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 999\n' +
      '2. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç "–∑–∞–ø–æ–º–Ω–∏–ª–∏" –∏–ª–∏ "—É–∂–µ –µ—Å—Ç—å"\n' +
      '3. –ö–∞–∂–¥—ã–µ 10 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–º–µ—Ä–æ–≤ –±–æ—Ç —Å–æ–æ–±—â–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å\n' +
      '4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "?" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤\n\n' +
      'üèÜ –ü–æ–±–µ–¥–∞: –ö–æ–≥–¥–∞ –≤—Å–µ 999 –Ω–æ–º–µ—Ä–æ–≤ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã!\n\n' +
      '–ö–æ–º–∞–Ω–¥—ã:\n' +
      '/start - –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã\n' +
      '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
      '/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞';

    await this.sendMessage(msg.chat.id, helpMessage);
  }

  async handleResetCommand(msg) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    const userId = msg.from.id.toString();
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (userId === process.env.ADMIN_USER_ID || process.env.NODE_ENV === 'development') {
      const result = await this.gameLogic.resetGame();
      await this.sendMessage(msg.chat.id, result.text);
    } else {
      await this.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  async sendMessage(chatId, text) {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç:', chatId);
      console.log('üìù –¢–µ–∫—Å—Ç:', text.substring(0, 100) + (text.length > 100 ? '...' : ''));
      
      await this.bot.sendMessage(chatId, text, { parse_mode: 'HTML' });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç:', chatId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç', chatId, ':', error);
    }
  }

  async stop() {
    try {
      await this.bot.stopPolling();
      console.log('Bot stopped');
    } catch (error) {
      console.error('Error stopping bot:', error);
    }
  }

  getBotInfo() {
    return this.bot.getMe();
  }
}
