export class GameLogic {
  constructor(storage) {
    this.storage = storage;
  }

  async processMessage(message, userId) {
    const text = message.trim();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
    if (text === '?') {
      return this.getMissingNumbersResponse();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: -<—á–∏—Å–ª–æ> (–ª—é–±–æ–π –¥–ª–∏–Ω—ã), –¥–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if (/^-\d+$/.test(text)) {
      const numberToRemove = text.slice(1);
      const maxNumbers = parseInt(process.env.MAX_NUMBERS) || 999;
      const numVal = parseInt(numberToRemove);
      if (!(numVal >= 1 && numVal <= maxNumbers)) {
        return { text: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', type: 'error' };
      }
      const result = this.storage.removeNumber(numberToRemove, userId);
      if (result.wasRemoved) {
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await this.storage.saveData();
        let response = '—É–¥–∞–ª–µ–Ω–æ';
        if (result.remaining % 10 === 0) {
          response += `\n–û—Å—Ç–∞–ª–æ—Å—å ${result.remaining} –Ω–æ–º–µ—Ä–æ–≤`;
        }
        return { text: response, type: 'delete_success' };
      }
      if (result.error === 'Number not found') {
        return { text: '–Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', type: 'not_found' };
      }
      if (result.error === 'Forbidden: not owner') {
        return { text: '—ç—Ç–æ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä', type: 'forbidden' };
      }
      return { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞', type: 'error' };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞
    if (this.isValidNumberFormat(text)) {
      return await this.processNumberSubmission(text, userId, false);
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    const maxNumbers = parseInt(process.env.MAX_NUMBERS) || 999;
    return {
      text: `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 001 –¥–æ ${String(maxNumbers).padStart(3, '0')} –∏–ª–∏ "?" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤`,
      type: 'info'
    };
  }

  isValidNumberFormat(text) {
    const maxNumbers = parseInt(process.env.MAX_NUMBERS) || 999;
    return /^\d{1,3}$/.test(text) && parseInt(text) >= 1 && parseInt(text) <= maxNumbers;
  }

  async processNumberSubmission(number, userId, isBot = false) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
    if (!isBot) {
      this.storage.data.players.add(userId);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä
    if (this.storage.hasNumber(number)) {
      return {
        text: '—É–∂–µ –µ—Å—Ç—å',
        type: 'duplicate'
      };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä
    const result = this.storage.addNumber(number, userId);
    
    if (result.wasAdded) {
      let response = '–∑–∞–ø–æ–º–Ω–∏–ª–∏';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ä–∞—Ç–Ω–æ –ª–∏ 10 –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      if (result.remaining % 10 === 0) {
        response += `\n–û—Å—Ç–∞–ª–æ—Å—å ${result.remaining} –Ω–æ–º–µ—Ä–æ–≤`;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
      if (this.storage.isGameComplete()) {
        const maxNumbers = parseInt(process.env.MAX_NUMBERS) || 999;
        response += `\nüéâ –ü–û–ë–ï–î–ê! üéâ\n–í—Å–µ ${maxNumbers} –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω—ã!`;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await this.storage.saveData();
      
      return {
        text: response,
        type: 'success'
      };
    }

    return {
      text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞',
      type: 'error'
    };
  }

  getMissingNumbersResponse() {
    const missingNumbers = this.storage.getFirstTenMissingNumbers();
    
    if (missingNumbers.length === 0) {
      return {
        text: '–í—Å–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã! üéâ',
        type: 'complete'
      };
    }

    const numbersList = missingNumbers.join(', ');
    return {
      text: `–ü–µ—Ä–≤—ã–µ 10 –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤:\n${numbersList}`,
      type: 'missing_numbers'
    };
  }

  getGameStats() {
    const stats = this.storage.getStats();
    const lastUpdateMoscow = new Date(stats.lastUpdate).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    return {
      text: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n` +
            `–ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: ${stats.totalNumbers}\n` +
            `–û—Å—Ç–∞–ª–æ—Å—å: ${stats.remaining}\n` +
            `–ò–≥—Ä–æ–∫–æ–≤: ${stats.players}\n` +
            `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ú—Å–∫): ${lastUpdateMoscow}`,
      type: 'stats'
    };
  }

  async resetGame() {
    this.storage.data.numbers.clear();
    this.storage.data.players.clear();
    this.storage.data.lastUpdate = new Date().toISOString();
    await this.storage.saveData();
    
    return {
      text: '–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í—Å–µ –Ω–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã.',
      type: 'reset'
    };
  }
}
